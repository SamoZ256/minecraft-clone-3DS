; Example PICA200 vertex shader

; Uniforms
.fvec viewProj[4], position

; Constants
.constf const1(0.0, 1.0, -1.0, 0.5)
.alias  zeros const1.xxxx ; Vector full of zeros
.alias  ones  const1.yyyy ; Vector full of ones
.alias  minusOnes const1.zzzz ; Vector full of -1.0
.alias  half  const1.wwww
.constf const2(0.05, 0.0, -64.0, 0.25)
.alias  smallnumber const2.xxxx
.alias  negNearPlane const2.zzzz
.alias  invFarPlaneMinusNearPlane const2.wwww ; 1.0 / (68.0 - 64.0)

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = position + inpos
	add r1, position, r0

	; outview = -r1
	mov outview, -r1

	; outpos = viewProj * r1
	dp4 outpos.x, viewProj[0], r1
	dp4 outpos.y, viewProj[1], r1
	dp4 outpos.z, viewProj[2], r1
	dp4 outpos.w, viewProj[3], r1

	; outtex = intex
	mov outtc0, intex

	; Normal
	mov r14, innrm
	dp3 r6.x, r14, r14
	rsq r6.x, r6.x
	mul r14.xyz, r14.xyz, r6.x

	; Color (for fog)

	; Compute distance from (0, 0, 0)
	; r2 = pos * pos
	mul r2, r1, r1
	; r3 = r2.x + r2.z
	add r3, r2.xxxx, r2.zzzz
	; r3 = 1.0 / sqrt(r3)
	rsq r3, r3
	; r3 = 1.0 / r3
	rcp r3, r3
	; r3 -= nearPlane
	add r3, negNearPlane, r3
	; r3 /= (farPlane - nearPlane)
	mul r3, invFarPlaneMinusNearPlane, r3
	; r3 = max(r3, 0.0)
	max r3, zeros, r3
	; r3 = min(r3, 1.0)
	min r3, ones, r3

	mov outclr, r3
	mov outclr.w, ones.x

	mov r0, const1.yxxx
	add r4, ones, r14.z
	mul r4, half, r4
	cmp zeros, ge, ge, r4.x
	rsq r4, r4.x
	mul r5, half, r14
	jmpc cmp.x, degenerate

	rcp r0.z, r4.x
	mul r0.xy, r5, r4

degenerate:
	mov outnq, r0

	; We're finished
	end
.end
